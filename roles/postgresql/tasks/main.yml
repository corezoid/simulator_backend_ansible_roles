---
# Repository Setup
# These tasks configure the PostgreSQL repository with compatibility for both
# Ubuntu 22.04 and 24.04, adapting to the change in APT key handling
- name: Create APT keyrings directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags:
    - install-master
    - install-replica

- name: Download PostgreSQL repository signing key using curl
  shell: |
    curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc -o /etc/apt/keyrings/postgresql-ACCC4CF8.asc
  args:
    creates: /etc/apt/keyrings/postgresql-ACCC4CF8.asc
  tags:
    - install-master
    - install-replica

- name: Update PostgreSQL repository source with dearmored key
  lineinfile:
    path: /etc/apt/sources.list.d/pgdg.list
    line: 'deb [signed-by=/etc/apt/keyrings/postgresql-ACCC4CF8.asc] http://apt.postgresql.org/pub/repos/apt {{ ansible_distribution_release }}-pgdg main'
    create: yes
    state: present
  tags:
    - install-master
    - install-replica

- name: Update apt package cache
  apt:
    update_cache: yes
  tags:
    - install-master
    - install-replica

# Package Installation
# These tasks install PostgreSQL server, PostGIS extensions, and required dependencies
- name: Install PostgreSQL {{ db_version }}
  apt:
    name: postgresql-{{ db_version }}
    state: present
  tags:
    - install-master
    - install-replica

- name: Install PostGIS 3 {{ db_version }}
  apt:
    name:
       - postgresql-{{ db_version }}-postgis-3
       - postgresql-{{ db_version }}-postgis-3-scripts
    state: present
  tags:
    - install-master
    - install-replica

# Service Configuration
# These tasks manage the PostgreSQL service
- name: enable postgresql to survive reboot
  service: name={{ item }} enabled=yes
  with_items:
    - postgresql
  tags:
    - install-master
    - install-replica

- name: Stop PostgreSQL
  become: yes
  systemd:
    name: postgresql
    state: stopped
  tags:
    - install-master
    - install-replica

# Directory Setup
# These tasks create and configure the necessary directory structure for PostgreSQL data
- name: Create PostgreSQL directories
  file:
    path: "{{ item.path }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "{{ item.mode }}"
  loop:
    - { path: "{{ top_db_dir }}", mode: "0775" }
    - { path: "{{ db_dir }}", mode: "0755" }
  tags:
    - install-master
    - install-replica

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ db_dir }}/{{ db_version }}/main/PG_VERSION"
  register: pgdata_dir_version
  tags:
    - install-master
    - install-replica

- name: Install required packaged
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - acl
    - python3-pip
  tags:
    - install-master
    - install-replica

# System Configuration
# Adds necessary system configurations for running PostgreSQL
- name: Allow wheel group to sudo without password in Ubuntu
  become: true
  lineinfile:
    path: /etc/sudoers
    regexp: '^%wheel\s+ALL=\(ALL\)\s+NOPASSWD:\s+ALL'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  tags:
    - install-master
    - install-replica

# Database Initialization
# Initializes the PostgreSQL database if not already done
- name: Init DB Ubuntu
  become: true
  command: sudo -u postgres /usr/lib/postgresql/{{ db_version }}/bin/initdb -D {{ db_dir }}/{{ db_version }}/main --locale=en_US.UTF-8
  args:
    executable: /bin/bash
  tags:
    - install-master
    - install-replica

# File Structure Management
# Removes default directories and creates proper symlinks for custom installation
- name: Remove default PostgreSQL directories
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/var/lib/postgresql"
    - "/etc/postgresql"
  when: not pgdata_dir_version.stat.exists
  tags:
    - install-master
    - install-replica

# Create symlinks
- name: Create PostgreSQL symlinks
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
    owner: postgres
    group: postgres
    mode: 0700
  loop:
    - { src: "{{ db_dir }}", dest: "/var/lib/postgresql" }
    - { src: "{{ db_dir }}", dest: "/etc/postgresql" }
  tags:
    - install-master
    - install-replica

- name: Set ownership for /postgresqldata/
  file:
    path: "{{ top_db_dir }}"
    owner: postgres
    group: postgres
    recurse: yes
  tags:
    - install-master
    - install-replica

# PostgreSQL Configuration
# Configures PostgreSQL for general operation
- name: Add listen_addresses configuration to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "listen_addresses = '*'"
    insertafter: '^#*listen_addresses.*$'
  notify: restart postgresql
  when: default_config_postgresql == true or replica == true
  tags:
    - install-master
    - install-replica

- name: Update password_encryption in postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    regexp: '^password_encryption\s*='
    line: 'password_encryption = md5'
  when: default_config_postgresql == true or replica == true
  tags:
    - install-master
    - install-replica

# Replication Configuration
# Configures PostgreSQL for replication (master server)
- name: Add wal_level setting to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "wal_level = replica"
    state: present
    regexp: "^#?wal_level\\s*=.*$"
  when: replica == true
  tags:
    - install-master

- name: Add max_wal_senders setting to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "max_wal_senders = 2"
    state: present
    regexp: "^#?max_wal_senders\\s*=.*$"
  when: replica == true
  tags:
    - install-master

# Replica Setup
# Configures PostgreSQL for replication (replica server)
- name: Add max_replication_slots setting to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "max_replication_slots = 2"
    state: present
    regexp: "^#?max_replication_slots\\s*=.*$"
  when: replica == true
  tags:
    - install-master

- name: Add hot_standby setting to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "hot_standby = on"
    state: present
    regexp: "^#?hot_standby\\s*=.*$"
  when: replica == true
  tags:
    - install-master

- name: Add hot_standby_feedback setting to postgresql.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/postgresql.conf
    line: "hot_standby_feedback = on"
    state: present
    regexp: "^#?hot_standby_feedback\\s*=.*$"
  when: replica == true
  tags:
    - install-master

- name: Add replication rule to pg_hba.conf
  lineinfile:
    path: /etc/postgresql/{{ db_version }}/main/pg_hba.conf
    line: "host replication all {{ replica_ip }}/32 trust"
    state: present
    insertafter: EOF
  when: replica == true
  notify: restart postgresql
  tags:
    - install-master

- name: Create pg_scripts directory
  file:
    path: /postgresqldata/pgsql/scripts
    state: directory
    mode: "0755"
  when: replica == true
  tags:
    - install-replica

- name: Set ownership of pg_scripts directory
  file:
    path: /postgresqldata/pgsql/scripts
    owner: postgres
    group: postgres
  when: replica == true
  tags:
    - install-replica

- name: Add scripts for replica
  template: src=templates/init-replica.sh.j2 dest=/postgresqldata/pgsql/scripts/init-replica.sh mode=0755 owner=postgres group=postgres
  when: replica == true
  tags:
    - install-replica

- name: Delete files in main directory
  shell: "rm -rf /postgresqldata/pgsql/{{ db_version }}/main/*"
  when: replica == true
  tags:
    - install-replica

- name: Run init-replica.sh script
  command: "/postgresqldata/pgsql/scripts/init-replica.sh {{ master_ip }}"
  when: replica == true
  tags:
    - install-replica